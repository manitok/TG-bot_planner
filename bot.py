import telebot
import pymongo
from datetime import datetime, timedelta
from tasks import send_reminder, extend_deadline, remind
from bson.objectid import ObjectId

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8115885272:AAHvG_9HRkGDmmlye_XdVBCbHwxfH18rcwY"
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")
db = client.tasks
task_collection = db['task_collection']

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å:\n - —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –µ–≥–æ,\n - –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞/—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á),\n - –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ (—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å),\n - —É–¥–∞–ª—è—Ç—å –∏—Ö,\n - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–∏—Ç —Ç–µ–±—è –æ —Ç–æ–º, —á—Ç–æ —Å–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ (–ø—Ä–∏—à–ª–µ—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞), –∏ –ø—Ä–æ–¥–ª–∏—Ç –∑–∞–¥–∞—á—É –Ω–∞ –¥–µ–Ω—å, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–∏–ª–∞—Å—å.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø–∏—à–∏ /help"
    )

@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(
        message,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_task <–∑–∞–¥–∞—á–∞> | <–¥–µ–¥–ª–∞–π–Ω (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/list_tasks ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/edit_task <–Ω–æ–º–µ—Ä> | <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/complete_task <–Ω–æ–º–µ—Ä> ‚Äì –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/delete_tasks <–¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)> - —Å—Ç–µ—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "/remind_me <—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è> | <–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)> - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    )
@bot.message_handler(commands=['add_task'])
def add_task(message):
    try:
        task_info = message.text[len('/add_task '):]
        parts = task_info.split("|")

        if len(parts) != 2:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_task <–∑–∞–¥–∞—á–∞> | <–¥–µ–¥–ª–∞–π–Ω (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)>")
            return

        task_text = parts[0].strip()
        deadline = parts[1].strip()

        try:
            deadline_datetime = datetime.strptime(deadline, "%Y-%m-%d %H:%M")
        except ValueError:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ MongoDB
        task = {
            "user_id": message.chat.id,
            "text": task_text,
            "deadline": deadline_datetime,
            "status": "pending"
        }
        task_id = task_collection.insert_one(task).inserted_id  # –ü–æ–ª—É—á–∞–µ–º _id –∑–∞–¥–∞—á–∏

        str_task_id = str(task_id)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_time = deadline_datetime - timedelta(minutes=10)
        delay = (reminder_time - datetime.now()).total_seconds()

        if delay > 0:
            send_reminder.apply_async((message.chat.id, task_text, str_task_id), countdown=delay)

        extend_delay = (deadline_datetime - datetime.now()).total_seconds()

        if extend_delay > 0:
            extend_deadline.apply_async((message.chat.id, str_task_id), countdown=extend_delay)


        bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! –î–µ–¥–ª–∞–π–Ω: {deadline}.")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['remind_me'])
def set_reminder(message):
    try:
        reminder_info = message.text[len('/remind_me '):]
        parts = reminder_info.split("|")

        if len(parts) != 2:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /remind_me <—Ç–µ–∫—Å—Ç> | <–≤—Ä–µ–º—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)>")
            return

        reminder_text = parts[0].strip()
        reminder_time_str = parts[1].strip()

        try:
            reminder_time = datetime.strptime(reminder_time_str, "%Y-%m-%d %H:%M")
        except ValueError:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è Celery
        delay = (reminder_time - datetime.now()).total_seconds()

        if delay > 0:
            remind.apply_async((message.chat.id, reminder_text), countdown=delay)
            bot.reply_to(message, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: '{reminder_text}' –Ω–∞ {reminder_time_str}")
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –í—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['list_tasks'])
def list_tasks(message):
    user_tasks = list(task_collection.find({"user_id": message.chat.id}))

    if len(user_tasks) == 0:
        bot.reply_to(message, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    now = datetime.now()
    overdue_count = 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    task_list = "üìå *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"

    for i, task in enumerate(user_tasks, start=1):
        status = "‚úÖ" if task['status'] == "completed" else "‚è≥"
        deadline = task['deadline']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        time_left = deadline - now
        if time_left.total_seconds() <= 0:
            time_left_str = "‚ùå *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!*"
            overdue_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        else:
            days = time_left.days
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes = remainder // 60
            time_left_str = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days} –¥. {hours} —á. {minutes} –º–∏–Ω."

        task_list += (
            f"*{i}.* {task['text']}\n"
            f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%Y-%m-%d %H:%M')}\n"
            f"   {time_left_str}\n"
            f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    if overdue_count > 0:
        task_list += f"‚ö† *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –∑–∞–¥–∞—á:* {overdue_count} ‚ùó"

    bot.reply_to(message, task_list, parse_mode="Markdown")

@bot.message_handler(commands=['edit_task'])
def edit_task(message):
    try:
        task_info = message.text[len('/edit_task '):]
        parts = task_info.split("|")

        if len(parts) != 2:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: /edit_task <–Ω–æ–º–µ—Ä> | <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
            return

        task_number = int(parts[0].strip())
        new_text = parts[1].strip()

        user_tasks = list(task_collection.find({"user_id": message.chat.id}))

        if task_number < 1 or task_number > len(user_tasks):
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            return

        task_id = user_tasks[task_number - 1]['_id']
        task_collection.update_one({"_id": task_id}, {"$set": {"text": new_text}})

        bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task_number} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {new_text}")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['complete_task'])
def complete_task(message):
    try:
        task_number = int(message.text[len('/complete_task '):].strip())

        user_tasks = list(task_collection.find({"user_id": message.chat.id}))

        if task_number < 1 or task_number > len(user_tasks):
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            return

        task_id = user_tasks[task_number - 1]['_id']
        task_collection.update_one({"_id": task_id}, {"$set": {"status": "completed"}})

        bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task_number} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['delete_tasks'])
def delete_tasks(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        date_text = message.text[len('/delete_tasks '):].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            target_date = datetime.strptime(date_text, "%Y-%m-%d").date()
        except ValueError:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–ì–ì–ì-–ú–ú-–î–î")
            return

        # –§–∏–ª—å—Ç—Ä: –∏—â–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        user_id = message.chat.id
        deleted_count = task_collection.delete_many({
            "user_id": user_id,
            "deadline": {
                "$gte": datetime.combine(target_date, datetime.min.time()),  # –° –Ω–∞—á–∞–ª–∞ –¥–Ω—è
                "$lt": datetime.combine(target_date, datetime.max.time())    # –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            }
        }).deleted_count

        if deleted_count > 0:
            bot.reply_to(message, f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–¥–∞—á –Ω–∞ {date_text}.")
        else:
            bot.reply_to(message, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ {date_text}.")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

bot.polling()
